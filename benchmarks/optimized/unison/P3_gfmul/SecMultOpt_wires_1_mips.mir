--- |
  ; ModuleID = 'SecMultOpt_wires_1_mips.ll'
  target datalayout = "E-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64"
  target triple = "mips"
  
  ; Function Attrs: nounwind
  define i32 @SecMult(i32 signext %a, i32 signext %b, i32 signext %a0, i32 signext %b0, i32 signext %r0) #0 {
    %1 = xor i32 %a, %a0
    %2 = xor i32 %b, %b0
    %3 = call i32 @gfmul(i32 signext %a0, i32 signext %b0) #2
    %4 = call i32 @gfmul(i32 signext %1, i32 signext %2) #2
    %5 = call i32 @gfmul(i32 signext %a0, i32 signext %2) #2
    %6 = xor i32 %r0, %5
    %7 = call i32 @gfmul(i32 signext %1, i32 signext %b0) #2
    %8 = xor i32 %6, %5
    %9 = xor i32 %3, %r0
    %10 = xor i32 %4, %8
    %11 = xor i32 %9, %10
    ret i32 %11
  }
  
  declare i32 @gfmul(i32 signext, i32 signext) #1
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32,+soft-float" "unsafe-fp-math"="false" "use-soft-float"="true" }
  attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="mips32" "target-features"="+mips32,+soft-float" "unsafe-fp-math"="false" "use-soft-float"="true" }
  attributes #2 = { nobuiltin }
  
  !llvm.ident = !{!0}
  
  !0 = !{!"clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)"}

...
---
name:            SecMult
alignment:       2
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: gpr32 }
  - { id: 1, class: gpr32 }
  - { id: 2, class: gpr32 }
  - { id: 3, class: gpr32 }
  - { id: 4, class: gpr32 }
  - { id: 5, class: gpr32 }
  - { id: 6, class: gpr32 }
  - { id: 7, class: gpr32 }
  - { id: 8, class: gpr32 }
  - { id: 9, class: gpr32 }
  - { id: 10, class: gpr32 }
  - { id: 11, class: gpr32 }
  - { id: 12, class: gpr32 }
  - { id: 13, class: gpr32 }
  - { id: 14, class: gpr32 }
  - { id: 15, class: gpr32 }
  - { id: 16, class: gpr32 }
  - { id: 17, class: gpr32 }
  - { id: 18, class: gpr32 }
  - { id: 19, class: gpr32 }
  - { id: 20, class: gpr32 }
  - { id: 21, class: gpr32 }
  - { id: 22, class: gpr32 }
liveins:         
  - { reg: '%a0', virtual-reg: '%0' }
  - { reg: '%a1', virtual-reg: '%1' }
  - { reg: '%a2', virtual-reg: '%2' }
  - { reg: '%a3', virtual-reg: '%3' }
  - { reg: '%t9' }
  - { reg: '%v0' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        true
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
fixedStack:      
  - { id: 0, offset: 16, size: 4, alignment: 8, isImmutable: true, isAliased: false }
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveins: %a0, %a1, %a2, %a3, %t9, %v0
    liveouts: %v0
  
    %4 = ADDu %v0, %t9
    %3 = COPY %a3
    %2 = COPY %a2
    %1 = COPY %a1
    %0 = COPY %a0
    %5 = LW %fixed-stack.0, 0, <0x47994e0> = !{!"unison-memory-partition", i32 0} :: (load 4 from stack, align 8)
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %6 = LW %4, target-flags(<unknown>) @gfmul, <0x4798290> = !{!"unison-memory-partition", i32 1} :: (load 4 from call-entry @gfmul)
    %a0 = COPY %2
    %a1 = COPY %3
    %gp = COPY %4
    %t9 = COPY %6
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit %gp, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %7 = COPY %v0
    %8 = XOR %0, %2
    %9 = XOR %1, %3
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %10 = LW %4, target-flags(<unknown>) @gfmul, <0x47a93b0> = !{!"unison-memory-partition", i32 2} :: (load 4 from call-entry @gfmul)
    %a0 = COPY %8
    %a1 = COPY %9
    %t9 = COPY %10
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %11 = COPY %v0
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %12 = LW %4, target-flags(<unknown>) @gfmul, <0x47a9480> = !{!"unison-memory-partition", i32 3} :: (load 4 from call-entry @gfmul)
    %a0 = COPY %2
    %a1 = COPY %9
    %t9 = COPY %12
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %13 = COPY %v0
    ADJCALLSTACKDOWN 16, implicit-def dead %sp, implicit %sp
    %14 = LW %4, target-flags(<unknown>) @gfmul, <0x47a9590> = !{!"unison-memory-partition", i32 4} :: (load 4 from call-entry @gfmul)
    %a0 = COPY %8
    %a1 = COPY %3
    %t9 = COPY %14
    JALRPseudo killed %t9, csr_o32, implicit-def dead %ra, implicit %a0, implicit %a1, implicit-def %sp, implicit-def %v0
    ADJCALLSTACKUP 16, 0, implicit-def dead %sp, implicit %sp
    %16 = XOR %7, %5
    %17 = XOR %5, %13
    %18 = XOR killed %17, %13
    %19 = XOR %11, killed %18
    %20 = XOR killed %16, killed %19
    %v0 = COPY %20
    RetRA implicit %v0

...
