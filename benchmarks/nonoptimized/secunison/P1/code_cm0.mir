--- |
  ; ModuleID = 'code_cm0.ll'
  target datalayout = "e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64"
  target triple = "thumbv6m--"
  
  ; Function Attrs: nounwind
  define arm_aapcscc i32 @_Z7computejjjj(i32 %r1, i32 %r2, i32 %st2_orig, i32 %st10_orig) #0 {
    %1 = alloca i32, align 4
    %2 = alloca i32, align 4
    %3 = alloca i32, align 4
    %4 = alloca i32, align 4
    %r25 = alloca i32, align 4
    %r24 = alloca i32, align 4
    %st2 = alloca i32, align 4
    %sTT2 = alloca i32, align 4
    %st10 = alloca i32, align 4
    %sTT10 = alloca i32, align 4
    store i32 %r1, i32* %1, align 4
    store i32 %r2, i32* %2, align 4
    store i32 %st2_orig, i32* %3, align 4
    store i32 %st10_orig, i32* %4, align 4
    %5 = load i32, i32* %4, align 4
    %6 = load i32, i32* %1, align 4
    %7 = xor i32 %5, %6
    store i32 %7, i32* %st10, align 4
    %8 = load i32, i32* %3, align 4
    %9 = load i32, i32* %1, align 4
    %10 = xor i32 %8, %9
    store i32 %10, i32* %st2, align 4
    %11 = load i32, i32* %st2, align 4
    %12 = xor i32 %11, 0
    store i32 %12, i32* %r24, align 4
    %13 = load i32, i32* %st10, align 4
    %14 = xor i32 %13, 0
    store i32 %14, i32* %r25, align 4
    %15 = load i32, i32* %r25, align 4
    %16 = xor i32 %15, 0
    store i32 %16, i32* %sTT2, align 4
    %17 = load i32, i32* %r24, align 4
    %18 = xor i32 %17, 0
    store i32 %18, i32* %sTT10, align 4
    %19 = load i32, i32* %sTT2, align 4
    %20 = load i32, i32* %sTT10, align 4
    %21 = sub i32 %19, %20
    ret i32 %21
  }
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-m0" "target-features"="+soft-float,+strict-align,-crypto,-neon" "unsafe-fp-math"="false" "use-soft-float"="true" }
  
  !llvm.module.flags = !{!0, !1}
  !llvm.ident = !{!2}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 1, !"min_enum_size", i32 4}
  !2 = !{!"clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)"}

...
---
name:            _Z7computejjjj
alignment:       1
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: tgpr }
  - { id: 1, class: tgpr }
  - { id: 2, class: tgpr }
  - { id: 3, class: tgpr }
  - { id: 4, class: tgpr }
  - { id: 5, class: tgpr }
  - { id: 6, class: tgpr }
  - { id: 7, class: tgpr }
  - { id: 8, class: tgpr }
  - { id: 9, class: tgpr }
  - { id: 10, class: tgpr }
  - { id: 11, class: tgpr }
  - { id: 12, class: tgpr }
liveins:         
  - { reg: '%r0', virtual-reg: '%0' }
  - { reg: '%r1', virtual-reg: '%1' }
  - { reg: '%r2', virtual-reg: '%2' }
  - { reg: '%r3', virtual-reg: '%3' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
stack:           
  - { id: 0, name: '<unnamed alloca>', offset: 0, size: 4, alignment: 4, 
      local-offset: -4 }
  - { id: 1, name: '<unnamed alloca>', offset: 0, size: 4, alignment: 4, 
      local-offset: -8 }
  - { id: 2, name: '<unnamed alloca>', offset: 0, size: 4, alignment: 4, 
      local-offset: -12 }
  - { id: 3, name: '<unnamed alloca>', offset: 0, size: 4, alignment: 4, 
      local-offset: -16 }
  - { id: 4, name: r25, offset: 0, size: 4, alignment: 4, local-offset: -20 }
  - { id: 5, name: r24, offset: 0, size: 4, alignment: 4, local-offset: -24 }
  - { id: 6, name: st2, offset: 0, size: 4, alignment: 4, local-offset: -28 }
  - { id: 7, name: sTT2, offset: 0, size: 4, alignment: 4, local-offset: -32 }
  - { id: 8, name: st10, offset: 0, size: 4, alignment: 4, local-offset: -36 }
  - { id: 9, name: sTT10, offset: 0, size: 4, alignment: 4, local-offset: -40 }
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveins: %r0, %r1, %r2, %r3
    liveouts: %r0
  
    %3 = COPY %r3
    %2 = COPY %r2
    %1 = COPY %r1
    %0 = COPY %r0
    tSTRspi %0, %stack.0.<unnamed alloca>, 0, 14, _, <0x4a7afc0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.1)
    tSTRspi %1, %stack.1.<unnamed alloca>, 0, 14, _, <0x4a7db60> = !{!"unison-memory-partition", i32 1} :: (store 4 into %ir.2)
    tSTRspi %2, %stack.2.<unnamed alloca>, 0, 14, _, <0x4a7dc70> = !{!"unison-memory-partition", i32 2} :: (store 4 into %ir.3)
    tSTRspi %3, %stack.3.<unnamed alloca>, 0, 14, _, <0x4a7dd80> = !{!"unison-memory-partition", i32 3} :: (store 4 into %ir.4)
    %4 = tLDRspi %stack.0.<unnamed alloca>, 0, 14, _, <0x4a7afc0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.1)
    %5, %cpsr = tEOR %3, killed %4, 14, _
    tSTRspi killed %5, %stack.8.st10, 0, 14, _, <0x4a7ddb0> = !{!"unison-memory-partition", i32 4} :: (store 4 into %ir.st10)
    %6 = tLDRspi %stack.0.<unnamed alloca>, 0, 14, _, <0x4a7afc0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.1)
    %7 = tLDRspi %stack.2.<unnamed alloca>, 0, 14, _, <0x4a7dc70> = !{!"unison-memory-partition", i32 2} :: (load 4 from %ir.3)
    %8, %cpsr = tEOR %7, killed %6, 14, _
    tSTRspi %8, %stack.6.st2, 0, 14, _, <0x4a7dec0> = !{!"unison-memory-partition", i32 5} :: (store 4 into %ir.st2)
    tSTRspi %8, %stack.5.r24, 0, 14, _, <0x4a7dfd0> = !{!"unison-memory-partition", i32 6} :: (store 4 into %ir.r24)
    %9 = tLDRspi %stack.8.st10, 0, 14, _, <0x4a7ddb0> = !{!"unison-memory-partition", i32 4} :: (load 4 from %ir.st10)
    tSTRspi %9, %stack.4.r25, 0, 14, _, <0x4a7e0e0> = !{!"unison-memory-partition", i32 7} :: (store 4 into %ir.r25)
    tSTRspi %9, %stack.7.sTT2, 0, 14, _, <0x4a7e1f0> = !{!"unison-memory-partition", i32 8} :: (store 4 into %ir.sTT2)
    %10 = tLDRspi %stack.5.r24, 0, 14, _, <0x4a7dfd0> = !{!"unison-memory-partition", i32 6} :: (load 4 from %ir.r24)
    tSTRspi %10, %stack.9.sTT10, 0, 14, _, <0x4a7e300> = !{!"unison-memory-partition", i32 9} :: (store 4 into %ir.sTT10)
    %11 = tLDRspi %stack.7.sTT2, 0, 14, _, <0x4a7e1f0> = !{!"unison-memory-partition", i32 8} :: (load 4 from %ir.sTT2)
    %12, %cpsr = tSUBrr killed %11, %10, 14, _
    %r0 = COPY %12
    tBX_RET 14, _, implicit %r0

...
