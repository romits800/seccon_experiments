--- |
  ; ModuleID = 'SecMultLinear_wires_1_cm0.ll'
  target datalayout = "e-m:e-p:32:32-i64:64-v128:64:128-a:0:32-n32-S64"
  target triple = "thumbv6m--"
  
  ; Function Attrs: nounwind
  define arm_aapcscc i32 @_Z7SecMultiiiii(i32 %a, i32 %b, i32 %a0, i32 %r0_01, i32 %p0_01) #0 {
    %1 = alloca i32, align 4
    %2 = alloca i32, align 4
    %3 = alloca i32, align 4
    %4 = alloca i32, align 4
    %5 = alloca i32, align 4
    %a1 = alloca i32, align 4
    %b0 = alloca i32, align 4
    %b1 = alloca i32, align 4
    %t0 = alloca i32, align 4
    %t0_prime = alloca i32, align 4
    %r0_10 = alloca i32, align 4
    store i32 %a, i32* %1, align 4
    store i32 %b, i32* %2, align 4
    store i32 %a0, i32* %3, align 4
    store i32 %r0_01, i32* %4, align 4
    store i32 %p0_01, i32* %5, align 4
    %6 = load i32, i32* %1, align 4
    %7 = load i32, i32* %3, align 4
    %8 = xor i32 %6, %7
    store i32 %8, i32* %a1, align 4
    %9 = load i32, i32* %5, align 4
    store i32 %9, i32* %t0, align 4
    %10 = load i32, i32* %3, align 4
    %11 = load i32, i32* %t0, align 4
    %12 = mul nsw i32 %10, %11
    store i32 %12, i32* %t0, align 4
    %13 = load i32, i32* %4, align 4
    %14 = load i32, i32* %t0, align 4
    %15 = xor i32 %13, %14
    store i32 %15, i32* %r0_10, align 4
    %16 = load i32, i32* %3, align 4
    store i32 %16, i32* %t0, align 4
    %17 = load i32, i32* %5, align 4
    %18 = load i32, i32* %t0, align 4
    %19 = mul nsw i32 %17, %18
    store i32 %19, i32* %t0, align 4
    %20 = load i32, i32* %r0_10, align 4
    %21 = load i32, i32* %t0, align 4
    %22 = xor i32 %20, %21
    store i32 %22, i32* %r0_10, align 4
    %23 = load i32, i32* %a1, align 4
    %24 = load i32, i32* %5, align 4
    %25 = xor i32 %23, %24
    store i32 %25, i32* %t0, align 4
    %26 = load i32, i32* %3, align 4
    %27 = load i32, i32* %t0, align 4
    %28 = mul nsw i32 %26, %27
    store i32 %28, i32* %t0, align 4
    %29 = load i32, i32* %r0_10, align 4
    %30 = load i32, i32* %t0, align 4
    %31 = xor i32 %29, %30
    store i32 %31, i32* %r0_10, align 4
    %32 = load i32, i32* %3, align 4
    store i32 %32, i32* %t0, align 4
    %33 = load i32, i32* %a1, align 4
    %34 = load i32, i32* %5, align 4
    %35 = xor i32 %33, %34
    store i32 %35, i32* %t0_prime, align 4
    %36 = load i32, i32* %t0_prime, align 4
    %37 = load i32, i32* %t0, align 4
    %38 = mul nsw i32 %36, %37
    store i32 %38, i32* %t0, align 4
    %39 = load i32, i32* %r0_10, align 4
    %40 = load i32, i32* %t0, align 4
    %41 = xor i32 %39, %40
    store i32 %41, i32* %r0_10, align 4
    %42 = load i32, i32* %3, align 4
    %43 = load i32, i32* %3, align 4
    %44 = mul nsw i32 %42, %43
    store i32 %44, i32* %t0, align 4
    %45 = load i32, i32* %t0, align 4
    %46 = load i32, i32* %4, align 4
    %47 = xor i32 %45, %46
    store i32 %47, i32* %b0, align 4
    %48 = load i32, i32* %a1, align 4
    %49 = load i32, i32* %a1, align 4
    %50 = mul nsw i32 %48, %49
    store i32 %50, i32* %t0, align 4
    %51 = load i32, i32* %t0, align 4
    %52 = load i32, i32* %r0_10, align 4
    %53 = xor i32 %51, %52
    store i32 %53, i32* %b1, align 4
    %54 = load i32, i32* %b0, align 4
    %55 = load i32, i32* %b1, align 4
    %56 = xor i32 %54, %55
    ret i32 %56
  }
  
  attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="cortex-m0" "target-features"="+soft-float,+strict-align,-crypto,-neon" "unsafe-fp-math"="false" "use-soft-float"="true" }
  
  !llvm.module.flags = !{!0, !1}
  !llvm.ident = !{!2}
  
  !0 = !{i32 1, !"wchar_size", i32 4}
  !1 = !{i32 1, !"min_enum_size", i32 4}
  !2 = !{!"clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)"}

...
---
name:            _Z7SecMultiiiii
alignment:       1
exposesReturnsTwice: false
hasInlineAsm:    false
isSSA:           true
tracksRegLiveness: true
tracksSubRegLiveness: false
registers:       
  - { id: 0, class: tgpr }
  - { id: 1, class: tgpr }
  - { id: 2, class: tgpr }
  - { id: 3, class: tgpr }
  - { id: 4, class: tgpr }
  - { id: 5, class: tgpr }
  - { id: 6, class: tgpr }
  - { id: 7, class: tgpr }
  - { id: 8, class: tgpr }
  - { id: 9, class: tgpr }
  - { id: 10, class: tgpr }
  - { id: 11, class: tgpr }
  - { id: 12, class: tgpr }
  - { id: 13, class: tgpr }
  - { id: 14, class: tgpr }
  - { id: 15, class: tgpr }
  - { id: 16, class: tgpr }
  - { id: 17, class: tgpr }
  - { id: 18, class: tgpr }
  - { id: 19, class: tgpr }
  - { id: 20, class: tgpr }
  - { id: 21, class: tgpr }
  - { id: 22, class: tgpr }
  - { id: 23, class: tgpr }
  - { id: 24, class: tgpr }
  - { id: 25, class: tgpr }
  - { id: 26, class: tgpr }
  - { id: 27, class: tgpr }
  - { id: 28, class: tgpr }
  - { id: 29, class: tgpr }
  - { id: 30, class: tgpr }
  - { id: 31, class: tgpr }
  - { id: 32, class: tgpr }
  - { id: 33, class: tgpr }
  - { id: 34, class: tgpr }
  - { id: 35, class: tgpr }
  - { id: 36, class: tgpr }
  - { id: 37, class: tgpr }
  - { id: 38, class: tgpr }
  - { id: 39, class: tgpr }
  - { id: 40, class: tgpr }
  - { id: 41, class: tgpr }
  - { id: 42, class: tgpr }
liveins:         
  - { reg: '%r0', virtual-reg: '%0' }
  - { reg: '%r1', virtual-reg: '%1' }
  - { reg: '%r2', virtual-reg: '%2' }
  - { reg: '%r3', virtual-reg: '%3' }
frameInfo:       
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  maxCallFrameSize: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
fixedStack:      
  - { id: 0, offset: 0, size: 4, alignment: 8, isImmutable: true, isAliased: false }
stack:           
  - { id: 0, name: '<unnamed alloca>', offset: 0, size: 4, alignment: 4, 
      local-offset: -4 }
  - { id: 1, name: '<unnamed alloca>', offset: 0, size: 4, alignment: 4, 
      local-offset: -8 }
  - { id: 2, name: '<unnamed alloca>', offset: 0, size: 4, alignment: 4, 
      local-offset: -12 }
  - { id: 3, name: '<unnamed alloca>', offset: 0, size: 4, alignment: 4, 
      local-offset: -16 }
  - { id: 4, name: '<unnamed alloca>', offset: 0, size: 4, alignment: 4, 
      local-offset: -20 }
  - { id: 5, name: a1, offset: 0, size: 4, alignment: 4, local-offset: -24 }
  - { id: 6, name: b0, offset: 0, size: 4, alignment: 4, local-offset: -28 }
  - { id: 7, name: b1, offset: 0, size: 4, alignment: 4, local-offset: -32 }
  - { id: 8, name: t0, offset: 0, size: 4, alignment: 4, local-offset: -36 }
  - { id: 9, name: t0_prime, offset: 0, size: 4, alignment: 4, local-offset: -40 }
  - { id: 10, name: r0_10, offset: 0, size: 4, alignment: 4, local-offset: -44 }
body:             |
  bb.0 (%ir-block.0, freq 8):
    liveins: %r0, %r1, %r2, %r3
    liveouts: %r0
  
    %3 = COPY %r3
    %2 = COPY %r2
    %1 = COPY %r1
    %0 = COPY %r0
    tSTRspi %0, %stack.0.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.1)
    tSTRspi %1, %stack.1.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.2)
    tSTRspi %2, %stack.2.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.3)
    tSTRspi %3, %stack.3.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.4)
    %4 = tLDRspi %fixed-stack.0, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from stack, align 8)
    tSTRspi killed %4, %stack.4.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.5)
    %5 = tLDRspi %stack.2.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.3)
    %6 = tLDRspi %stack.0.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.1)
    %7, %cpsr = tEOR %6, killed %5, 14, _
    tSTRspi killed %7, %stack.5.a1, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.a1)
    %8 = tLDRspi %stack.4.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.5)
    tSTRspi %8, %stack.8.t0, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.t0)
    %9 = tLDRspi %stack.2.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.3)
    %10, %cpsr = tMUL killed %9, %8, 14, _
    tSTRspi %10, %stack.8.t0, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.t0)
    %11 = tLDRspi %stack.3.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.4)
    %12, %cpsr = tEOR %11, %10, 14, _
    tSTRspi killed %12, %stack.10.r0_10, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.r0_10)
    %13 = tLDRspi %stack.2.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.3)
    tSTRspi %13, %stack.8.t0, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.t0)
    %14 = tLDRspi %stack.4.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.5)
    %15, %cpsr = tMUL killed %14, %13, 14, _
    tSTRspi %15, %stack.8.t0, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.t0)
    %16 = tLDRspi %stack.10.r0_10, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.r0_10)
    %17, %cpsr = tEOR %16, %15, 14, _
    tSTRspi killed %17, %stack.10.r0_10, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.r0_10)
    %18 = tLDRspi %stack.4.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.5)
    %19 = tLDRspi %stack.5.a1, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.a1)
    %20, %cpsr = tEOR %19, killed %18, 14, _
    tSTRspi %20, %stack.8.t0, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.t0)
    %21 = tLDRspi %stack.2.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.3)
    %22, %cpsr = tMUL killed %21, %20, 14, _
    tSTRspi %22, %stack.8.t0, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.t0)
    %23 = tLDRspi %stack.10.r0_10, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.r0_10)
    %24, %cpsr = tEOR %23, %22, 14, _
    tSTRspi killed %24, %stack.10.r0_10, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.r0_10)
    %25 = tLDRspi %stack.2.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.3)
    tSTRspi killed %25, %stack.8.t0, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.t0)
    %26 = tLDRspi %stack.4.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.5)
    %27 = tLDRspi %stack.5.a1, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.a1)
    %28, %cpsr = tEOR %27, killed %26, 14, _
    tSTRspi %28, %stack.9.t0_prime, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.t0_prime)
    %29 = tLDRspi %stack.8.t0, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.t0)
    %30, %cpsr = tMUL %28, %29, 14, _
    tSTRspi %30, %stack.8.t0, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.t0)
    %31 = tLDRspi %stack.10.r0_10, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.r0_10)
    %32, %cpsr = tEOR %31, %30, 14, _
    tSTRspi killed %32, %stack.10.r0_10, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.r0_10)
    %33 = tLDRspi %stack.2.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.3)
    %34, %cpsr = tMUL %33, %33, 14, _
    tSTRspi %34, %stack.8.t0, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.t0)
    %35 = tLDRspi %stack.3.<unnamed alloca>, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.4)
    %36, %cpsr = tEOR %34, killed %35, 14, _
    tSTRspi killed %36, %stack.6.b0, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.b0)
    %37 = tLDRspi %stack.5.a1, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.a1)
    %38, %cpsr = tMUL %37, %37, 14, _
    tSTRspi %38, %stack.8.t0, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.t0)
    %39 = tLDRspi %stack.10.r0_10, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.r0_10)
    %40, %cpsr = tEOR %38, killed %39, 14, _
    tSTRspi %40, %stack.7.b1, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (store 4 into %ir.b1)
    %41 = tLDRspi %stack.6.b0, 0, 14, _, <0x40dcfb0> = !{!"unison-memory-partition", i32 0} :: (load 4 from %ir.b0)
    %42, %cpsr = tEOR %41, %40, 14, _
    %r0 = COPY %42
    tBX_RET 14, _, implicit %r0

...
